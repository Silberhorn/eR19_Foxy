classType System.Pedal_Control.Brake.Brake_MDL
blockdiagramSpecification Main {
	methodBody getPercentage {
		outPin {
			connection_1
		}
	}
methodBody hasError {
		outPin active {
			connection_10
		}
	}
	simpleIdentifier tolerance_endHigh at (191, 355) {
		label at (0, -1)
		inPin outPin {
			connection_6
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier tolerance_startHigh at (191, 215) {
		label at (0, -1)
		inPin outPin {
			connection_4
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier tolerance_endLow at (191, 325) {
		label at (0, -1)
		inPin outPin {
			connection_5
		}
		sequenceCall {
			inPin
		}
	}
	simpleIdentifier tolerance_startLow at (191, 185) {
		label at (0, -1)
		inPin outPin {
			connection_3
		}
		sequenceCall {
			inPin
		}
	}
	return at (621, 125) {
		label at (0, 0)
		inPin connection_2
		sequenceCall {
			inPin connection_1
		}
	}
	complexIdentifier PedalCalc_instance at (351, 81) size (21, 31) {
		label at (0, 1)
		methodCall System.Pedal_Control.PedalCalc.getPercentage {
			argumentPin startVal_TL at (left, 10) connection_3
			argumentPin startVal_TH at (left, 13) connection_4
			argumentPin endVal_TL at (left, 24) connection_5
			argumentPin endVal_TH at (left, 27) connection_6
			argumentPin startVal at (left, 6) connection_8
			argumentPin endVal at (left, 19) connection_9
			argumentPin rawInput at (left, 1) connection_7
			returnPin at (right, 4) {
				connection_2
			}
			sequenceCall {
				inPin
			}
		}
		methodCall System.Pedal_Control.PedalCalc.hasError {
			returnPin at (right, 20) {
				connection_11
			}
			sequenceCall {
				inPin
			}
		}
	}
	methodArgumentIdentifier getPercentage.rawInput at (171, 95) {
		label at (0, -1)
		outPin {
			connection_7
		}
		sequenceCall {
			inPin
		}
	}
	methodArgumentIdentifier getPercentage.startValue at (171, 145) {
		label at (0, -1)
		outPin {
			connection_8
		}
		sequenceCall {
			inPin
		}
	}
	methodArgumentIdentifier getPercentage.endValue at (171, 275) {
		label at (0, -1)
		outPin {
			connection_9
		}
		sequenceCall {
			inPin
		}
	}
	return at (621, 285) {
		label at (0, 0)
		inPin connection_11
		sequenceCall {
			inPin connection_10
		}
	}
}